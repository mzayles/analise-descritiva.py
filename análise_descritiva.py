# -*- coding: utf-8 -*-
"""005_ANÁLISE-DESCRITIVA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n1yzFEsEfC9lYLQjPNlfnrjraV2Rrrco

# **ANÁLISE DESCRITIVA**

Perguntas de negócio:
    - Margem de lucro
    - Prejuízos
    - Recomendações
    - Padrão nos dados dos países

    Mensurar o passado, resumir os dados
"""

import pandas as pd
import numpy as np

# 700 linhas, 13 colunas
df = pd.read_excel('report-consolidado.xlsx')

# quantitativas e qualitativas > ex. idade e faixa etária
df.head(100)

# conversão de Qtde de Unidades Vendidas, Preço Unitário, Data
df.info()

df.columns
colunas = ['segmento', 'pais', 'produto', 'qtd_unidades_vendidas',
       'preco_unitario', 'valor_total', 'desconto', 'valor_total_c/_desconto',
       'custo_total', 'lucro', 'data', 'mes', 'ano']

df.columns = colunas
df.columns

df.info()

df['qtd_unidades_vendidas']
df['preco_unitario']

# conversão de qtd_unidades_vendidas e preco_unitario
df = df.astype(
    {
        'qtd_unidades_vendidas': np.int64,
        'preco_unitario': np.float64
    }
)

df.info()

# conversão de data
df.data

df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y')
df.data

# não existe valores duplicados
df.duplicated().sum()

# não existe valores nulos
df.isnull().sum()

# ordenar colunas
df.sort_values(['país', 'produto', 'data'], inplace=True)

# identificar problemas > lucro negativo
# coluna = variável (valor de cada coluna)

df.describe().round(2)

df.describe(include=object)

# verificar o menor lucro
df.sort_values(['lucro'])

# verificar o maior lucro
df.sort_values(['lucro'], ascending=False)

df.info()

"""### **ANÁLISE DE MARGEM DE LUCRO**"""

# agrupando dados por segmento
# agrupar as variáveis quantitativas pelas variáveis qualitativas
# agrupa as informações do meu segmento pelas variáveis das colunas

# maior e menor lucro por segmentos
colunas = ['valor_total_c/_desconto', 'custo_total', 'lucro']
df_segmento = df.groupby('segmento')[colunas].sum().round(2)

df_segmento['margem_lucro'] = round((df_segmento['lucro'] / df_segmento['valor_total_c/_desconto']) * 100, 2)
df_segmento

import matplotlib.pyplot as plt # ferramenta para gráficos

plt.figure(figsize=(10, 5))

df_segmento['valor_total_c/_desconto'].plot(kind='bar', color='pink')

plt.title('Faturamento por segmento')
plt.ylabel('Faturamento')
plt.xlabel('Segmentos')
plt.xticks(rotation=0);

# maior e menor lucro por país

colunas = ['valor_total_c/_desconto', 'custo_total', 'lucro']
df_pais = df.groupby('pais')[colunas].sum().round(2)

df_pais['margem_lucro'] = round((df_pais['lucro'] / df_pais['valor_total_c/_desconto']) * 100, 2)
df_pais

# maior e menor lucro por produto

colunas = ['valor_total_c/_desconto', 'custo_total', 'lucro']
df_produto = df.groupby('produto')[colunas].sum().round(2)

df_produto['margem_lucro'] = round((df_produto['lucro'] / df_produto['valor_total_c/_desconto']) * 100, 2)
df_produto

# agrupando dados por pais, segmento e produto

colunas = ['valor_total_c/_desconto', 'custo_total', 'lucro']

df_geral = df.groupby(['pais', 'segmento', 'produto'])[colunas].sum().round(2)
df_geral = df.groupby(['produto', 'segmento'])[colunas].sum().round(2) # prejuízos

df_geral

# cálculos de soma, média e mínimo em um agrupamento (funções de agregração)

df.groupby('segmento').agg(
    {
        'valor_total_c/_desconto': ['count', 'sum', 'mean', 'min', 'max'],
        'custo_total': 'mean',
        'lucro': ['min', 'max']
    }
).round(2)

"""### **FILTRANDO DADOS COM O MÉTODO QUERY DO DATAFRAME**"""

# método query

df_prejuizo = df.query('lucro < 0')
df_prejuizo

# prejuízos por cada país
df_prejuizo.groupby('pais')['lucro'].sum().round(2)

df_prejuizo.groupby('segmento')['lucro'].sum().round(2)

# gráfico de lucros negativos

df_grafico = df_prejuizo.groupby('produto')['lucro'].sum().round(2)
df_grafico.plot(kind='bar', color='pink')
